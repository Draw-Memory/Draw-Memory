<!DOCTYPE html>
<html lang="en">

<head>

  <!-- 
    This is the main Handlebars template for the site 
    - When the user visits the homepage or submits a choice the app calls the endpoints in server.js
    - The server script passes data in here and the Handlebars code builds it into the HTML page
  -->

  <meta charset="utf-8" />
  <link rel="icon" href="https://glitch.com/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <title>{{seo.title}}</title>

  <!-- Meta tags for SEO and social sharing -->
  <link rel="canonical" href="{{seo.url}}">
  <meta name="description" content="{{seo.description}}">
  <meta property="og:title" content="{{seo.title}}">
  <meta property="og:type" content="article">
  <meta property="og:url" content="{{seo.url}}">
  <meta property="og:description" content="{{seo.description}}">
  <meta property="og:image" content="{{seo.image}}">
  <meta name="twitter:card" content="summary">

  <!-- Import the webpage's stylesheet -->
  <link rel="stylesheet" href="/style.css" />

  <!-- Show choice chart on poll submission -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script type="text/javascript">
    /*
    The chart uses chart.js - try tweaking the config!
    https://www.chartjs.org/docs/3.0.2/charts/doughnut.html
    
    We pass the choices and picks arrays from the page when the server script returns them
    */
    function showChart(choices, picks) {
      
      // Get the page element to show the chart inside
      var ctx = document.getElementById('myChart');
      
      // Set up the chart colors
      var colors = ["#05DA84", "#E6E656", "#E5AED6"];
      var border = "#ffffff";
      
      // Make sure we have some votes–if not show an empty chart
      if(picks.reduce((a, b) => a + b, 0)<1) {
        picks=["1e-10"]; // use a near zero value so that the doughnut displays
        choices=["No votes! Reload and vote again."];
        colors=["#00000000"]; // we'll show an empty doughnut shape
        border=["#000000"];
      }
      
      // Build the chart in the page element
      var myLineChart = new Chart(ctx, {
        type: "doughnut",
        data: {
          labels: choices,
          datasets: [{
            data: picks,
            backgroundColor: colors,
            borderColor: border,
            fill: true,
            hoverOffset: 12,
            cutout: "60%"
          }]
        },
        options: {
          plugins: {
            legend: {
              display: true,
              position: "bottom",
              labels: {
                padding: 24
              }
            }
          },
          layout: {
            padding: 24
          }
        }
      });
    }
  </script>

  <!-- Processing -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.1/p5.js"></script>
  <script>  
   
    var paths = []; // All the paths    
    var painting = false;// Are we painting?    
    var next = 0;// How long until the next circle    
    var current;// Where are we now and where were we?
    var previous;  
    var canvas;
    
    function setup() {
      canvas = createCanvas(windowWidth, windowHeight);
      canvas.parent('canvasForHTML');
      current = createVector(0,0);
      previous = createVector(0,0);
    };

    function draw() {
      background(200);
    
      // If it's time for a new point
      if (millis() > next && painting) {

      // Grab mouse position      
      current.x = mouseX;
      current.y = mouseY;

      // New particle's force is based on mouse movement
      var force = p5.Vector.sub(current, previous);
      force.mult(0.05);

      // Add new particle
      paths[paths.length - 1].add(current, force);
      
      // Schedule next circle
      next = millis() + random(100);

      // Store mouse values
      previous.x = current.x;
      previous.y = current.y;
      }

      // Draw all paths
      for( var i = 0; i < paths.length; i++) {
      paths[i].update();
      paths[i].display();
      }
    }

    // Start it up
    function mousePressed() {
      next = 0;
      painting = true;
      previous.x = mouseX;
      previous.y = mouseY;
      paths.push(new Path());
    }

    // Stop
    function mouseReleased() {
      painting = false;
    }

    // A Path is a list of particles
    function Path() {
      this.particles = [];
      this.hue = random(100);
    }

    Path.prototype.add = function(position, force) {
      // Add a new particle with a position, force, and hue
      this.particles.push(new Particle(position, force, this.hue));
    }

    // Display plath
    Path.prototype.update = function() {  
      for (var i = 0; i < this.particles.length; i++) {
      this.particles[i].update();
      }
    }  

    // Display plath
    Path.prototype.display = function() {
      
      // Loop through backwards
      for (var i = this.particles.length - 1; i >= 0; i--) {
      // If we shold remove it
      if (this.particles[i].lifespan <= 0) {
        this.particles.splice(i, 1);
      // Otherwise, display it
      } else {
        this.particles[i].display(this.particles[i+1]);
      }
      }

    }  

    // Particles along the path
    function Particle(position, force, hue) {
      this.position = createVector(position.x, position.y);
      this.velocity = createVector(force.x, force.y);
      this.drag = 0.95;
      this.lifespan = 255*random(10);
    }

    Particle.prototype.update = function() {
      // Move it
      this.position.add(this.velocity);
      // Slow it down
      this.velocity.mult(this.drag);
      // Fade it out
      this.lifespan--;
    }

    // Draw particle and connect it with a line
    // Draw a line to another
    Particle.prototype.display = function(other) {
      stroke(0, this.lifespan);
      fill(0, this.lifespan/2);    
      ellipse(this.position.x,this.position.y, 2, 2);    
      // If we need to draw a line
      if (other) {
      line(this.position.x, this.position.y, other.position.x, other.position.y);
      }
    }
 </script>

</head>

<body>
  <div class="wrapper">
    <div class="content" role="main">

      <!-- This is the start of content for our page -->
      <h3>Draw Memory</h3>

      {{#if error}}
      <p class="error">
        {{error}}
      </p>
      
      {{else}}
      <!-- Server returns a flag when the user has submitted a choice and we show the results -->
      
      {{#if results}}
      <h2>
        Results
      </h2>
      <div class="poll-results">
        <p>
          Submissions so far (see the <a href="/logs">Admin</a> page for a log):
        </p>
        <p>
          <!-- Pass arrays from the API to the chart script in page head -->
          <canvas id="myChart"></canvas>
          <script type="text/javascript">
            showChart("{{{ optionNames }}}".split(","), "{{{ optionCounts }}}".split(","));
          </script>
        </p>
        <!-- If the user hasn't already made a choice we show the poll -->
      </div>
      
      {{else}}
 
       <div class="poll-form">
        <p>Qual o desenho base?</p>
        <!-- Call the server post endpoint when the user submits an option in the poll -->
        <form method="post" action="/">
          <!-- The server script returns the list of language options to offer in the poll -->
          {{#each optionNames}}
          <input type="radio" id="{{this}}" name="language" value="{{this}}" required />
          <label for="{{this}}">{{this}}</label>
          {{/each}}
          <br /><br />
          <button type="submit">
            Submit
          </button>
        </form>
        <!-- ADD LINK FROM TODO -->
        
      </div>
      {{/if}}
      {{/if}}

    </div>
  </div>
  
  <h3>Tela para desenhar</h3>
  <div id="canvasForHTML"></div>  

  <!-- The footer holds our remix button — you can use it for structure or cut it out ✂ -->
  <footer class="footer">
    <div class="links"></div>
    <a href="/">Home</a>
    <span class="divider">|</span>
    <a href="/logs">Admin</a>
    {{!-- <a class="btn--remix" target="_top" href="https://glitch.com/edit/#!/remix/glitch-hello-sqlite">
      <img src="https://cdn.glitch.com/605e2a51-d45f-4d87-a285-9410ad350515%2FLogo_Color.svg?v=1618199565140"
        alt="" />
      Remix on Glitch
    </a> --}}
  </footer>
</body>

</html>
