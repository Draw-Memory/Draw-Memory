<!DOCTYPE html>
<html lang="en">

<head>

  <!-- 
    This is the main Handlebars template for the site 
    - When the user visits the homepage or submits a  the app calls the endpoints in server.js
    - The server script passes data in here and the Handlebars code builds it into the HTML page
  -->

  <meta charset="utf-8" />
  <link rel="icon" href="https://glitch.com/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <title>{{seo.title}}</title>

  <!-- Meta tags for SEO and social sharing -->
  <link rel="canonical" href="{{seo.url}}">
  <meta name="description" content="{{seo.description}}">
  <meta property="og:title" content="{{seo.title}}">
  <meta property="og:type" content="article">
  <meta property="og:url" content="{{seo.url}}">
  <meta property="og:description" content="{{seo.description}}">
  <meta property="og:image" content="{{seo.image}}">

  <!-- Import the webpage's stylesheet -->
  <link rel="stylesheet" href="/style.css" />

  <!-- Processing -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.1/p5.js"></script>

</head>

<body>

  <div class="wrapper">

    <!-- Links -->
    <div class="links">
      <a href="/gravar">Memorizar</a>
      <span class="divider">|</span>
      <a href="/">Desenhar</a>
      <span class="divider">|</span>
      <a href="/logs">Admin</a>
    </div> 

    <div id="canvasForDraw"></div>   
    <script type="text/javascript">
          
      var points = []; // All points    
      var painting = false;// Are we painting?    
      var next = 0;// How long until the next circle    
      var current;// Where are we now and where were we?
      var previous;  
      var canvas;
      
      function setup() {
        canvas = createCanvas(windowWidth, windowHeight);
        canvas.parent('canvasForDraw');
        current = createVector(0,0);
        previous = createVector(0,0);

        let saveButton = createButton('Gravar desenho');
        saveButton.mousePressed(uploadDrawing);
      };

      async function uploadDrawing() {
        let div = createDiv('This is some text.');
        div.html('<a href="/save"></a>');  // Sets the inner HTML of the div
        let s = div.html();  // Gets the inner HTML of the div
      }      
      
      function draw() {
        {{!-- background(200);     --}}
        
        if (millis() > next && painting) { // If it's time for a new point

          // Grab mouse position      
          current.x = mouseX;
          current.y = mouseY;

          // New particle's force is based on mouse movement
          var force = p5.Vector.sub(current, previous);
          force.mult(0.05);
          
          points[points.length - 1].add(current, force); // Add new particle      
          next = millis() + random(100); // Schedule next circle

          // Store mouse values
          previous.x = current.x;
          previous.y = current.y;

        }

        for( var i = 0; i < points.length; i++) {// Draw all points
          points[i].update();
          points[i].display();
        }
      }
      
      function mousePressed() {// Start it up
        next = 0;
        painting = true;
        previous.x = mouseX;
        previous.y = mouseY;
        points.push(new Path());
      }

      function mouseReleased() { // Stop
        painting = false;
      }
      
      function Path() {// A Path is a list of particles
        this.particles = [];
        this.hue = random(100);
      }

      Path.prototype.add = function(position, force) {
        // Add a new particle with a position, force, and hue
        this.particles.push(new Particle(position, force, this.hue));
      }
      
      Path.prototype.update = function() { // Display path 
        for (var i = 0; i < this.particles.length; i++) {
          this.particles[i].update();
        }
      }
      
      Path.prototype.display = function() {// Display path
        
        // Loop through backwards
        for (var i = this.particles.length - 1; i >= 0; i--) {
        // If we shold remove it
        if (this.particles[i].lifespan <= 0) {
          this.particles.splice(i, 1);      
        } else {// Otherwise, display it
          this.particles[i].display(this.particles[i+1]);
        }
        }

      }  

      // Particles along the path
      function Particle(position, force, hue) {
        this.position = createVector(position.x, position.y);
        this.velocity = createVector(force.x, force.y);
        this.drag = 0.95;
        this.lifespan = 255*random(10);
      }

      Particle.prototype.update = function() {      
        this.position.add(this.velocity);// Move it      
        this.velocity.mult(this.drag);// Slow it down      
        this.lifespan--;// Fade it out
      }

      // Draw particle and connect it with a line
      // Draw a line to another
      Particle.prototype.display = function(other) {
          stroke(0, this.lifespan);
          fill(0, this.lifespan/2);    
          ellipse(this.position.x,this.position.y, 2, 2);    
          
          if (other) { // If we need to draw a line
          line(this.position.x, this.position.y, other.position.x, other.position.y);
          }
      }

    </script>

  </div>  

</body>

</html>
